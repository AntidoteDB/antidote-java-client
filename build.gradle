group 'eu.antidotedb'
version '0.0.4'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

// requires 'protoc' to be installed locally
apply plugin: 'com.google.protobuf'

sourceCompatibility = 1.8


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.1'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.protobuf:protobuf-java:3.0.0'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

protobuf {
    generatedFilesBaseDir = "$projectDir/gen"
    protoc {
        // Download protoc from repositories
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir "$protobuf.generatedFilesBaseDir/main/java"
        }
    }
}


clean {
    delete protobuf.generatedFilesBaseDir
}


/**
 * Publishing to maven central:
 *
 * 0. Configure once:
 *
 *    Edit ~/.gradle/gradle.properties and add secret information:
 *
 *          signing.keyId=0E1885EA
 *          signing.password=********
 *          signing.secretKeyRingFile=/path/to/gnupg/secring.gpg
 *
 *          ossrhUsername=pzeller
 *          ossrhPassword=***********
 *
 *
 * 1. Run ./gradlew uploadArchives
 * 2. Go to https://oss.sonatype.org/ and sign in
 * 3. Go to "Staging Repositories" and find project
 * 4. Close repository
 * 5. Release repository
 *
 */


task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Java Antidote Client'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'A client to use the Antidote database from Java.'
                url 'https://github.com/SyncFree/antidote-java-client/'

                scm {
                    connection 'scm:https://github.com/SyncFree/antidote-java-client'
                    developerConnection 'scm:https://github.com/SyncFree/antidote-java-client'
                    url 'https://github.com/SyncFree/antidote-java-client/'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'pzeller'
                        name 'Peter Zeller'
                        email 'p_zeller@cs.uni-kl.de'
                    }
                }
            }
        }
    }
}
